QUESTION: Possible Words From Phone Digits 

Given a keypad as shown in the diagram, and an N digit number which is represented by array a[ ], the task is to list all words which are possible by pressing these numbers.


Example 1:

Input: N = 3, a[] = {2, 3, 4}
Output:
adg adh adi aeg aeh aei afg afh afi 
bdg bdh bdi beg beh bei bfg bfh bfi 
cdg cdh cdi ceg ceh cei cfg cfh cfi 
Explanation: When we press 2,3,4 then 
adg, adh, adi, ... cfi are the list of 
possible words.
Example 2:

Input: N = 3, a[] = {3, 4, 5}
Output:
dgj dgk dgl dhj dhk dhl dij dik dil 
egj egk egl ehj ehk ehl eij eik eil 
fgj fgk fgl fhj fhk fhl fij fik fil
Explanation: When we press 3,4,5 then 
dgj, dgk, dgl, ... fil are the list of 
possible words.
Your Task:
You don't need to read input or print anything. You just need to complete the function possibleWords() that takes an array a[ ] and N as input parameters and returns an array of all the possible words in lexicographical increasing order. 

Expected Time Complexity: O(4N * N).
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 10
2 ≤ a[i] ≤ 9

SOLUTION:

class Solution
{
    private:
    vector<string> ans;
    unordered_map<int,string> um;
    void backtrack(int a[],int l,int i,string &temp){
        if(i==l){
            ans.push_back(temp);
            return;
        }
        for(char x:um[a[i]]){
            temp.push_back(x);
            backtrack(a,l,i+1,temp);
            temp.pop_back();
        }
    }
    public:
    //Function to find list of all words possible by pressing given numbers.
    vector<string> possibleWords(int a[], int N)
    {
        //Your code here
        string store="";
        um[2]="abc";
        um[3]="def";
        um[4]="ghi";
        um[5]="jkl";
        um[6]="mno";
        um[7]="pqrs";
        um[8]="tuv";
        um[9]="wxyz";
        backtrack(a,N,0,store);
        return ans;
    }
};
