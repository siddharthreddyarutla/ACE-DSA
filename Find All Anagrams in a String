QUESTION;  Find All Anagrams in a String

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

SOLUTION:

vector<int> res;
    
    bool areSame(int ht[], int hp[])
    {
        for(int i = 0; i <26; i++)
        {
            if(ht[i] != hp[i])
                return false;
        }
        return true;
    }
    
    void checkInclusion(string text, string pat) {
        int n = text.length();
        int m = pat.length();

        int ht[26] = {0};
        int hp[26] = {0};
        
        for(int i = 0; i < m; i++)
        {
            ht[text[i]-'a']++;
            hp[pat[i]-'a']++;
        }
        //sliding window concept add one and remove other
        for(int i = m; i < n; i++)
        {
            if(areSame(ht,hp) == true)
            {
                res.push_back(i-m);
            }
                 
            ht[text[i]-'a']++;
            ht[text[i-m]-'a']--;
        }
        
        if(areSame(ht,hp) == true){
            res.push_back(n-m);
        }  
    }
    
    vector<int> findAnagrams(string text, string pat) {
        int n = text.length();
        int m = pat.length();
        
        if(n < m)
            return {};
        
        checkInclusion(text,pat);
        
        return res;
    }
